name: Release Build
on:
  workflow_dispatch:

jobs:
  check:
    name: Check Access
    runs-on: ubuntu-latest
    steps:
      - name: "Check access"
        uses: "lannonbr/repo-permission-check-action@2.0.0"
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  libcore:
    name: Native Build (LibCore)
    runs-on: ubuntu-latest
    needs: check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Fetch Status
        run: git submodule status library/core > libcore_status
        
      - name: LibCore Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            app/libs/libcore.aar
          key: ${{ hashFiles('.github/workflows/*', 'bin/lib/core/*', 'libcore_status') }}
          
      - name: Install Golang
        uses: actions/setup-go@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          go-version: 1.17.1
          
      - name: Gradle cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ~/.gradle
          key: native-${{ hashFiles('**/*.gradle.kts') }}
      
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: true

      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run lib core
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}	  
      - uses: actions/upload-artifact@v2
        with:
          name: AARS
          path: |
            app/libs/libcore.aar
  publish:
    name: Publish Release
    if: github.event.inputs.publish != 'y'
    runs-on: ubuntu-latest
    needs: libcore
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Donwload Artifacts
        uses: actions/download-artifact@v2
        with:
          name: AARs
          path: artifacts
      - name: Release
        run: |
          wget -O ghr.tar.gz https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
          tar -xvf ghr.tar.gz
          mv ghr*linux_amd64/ghr .
          mkdir AARs
          find artifacts -name "*.aar" -exec cp {} AARs \;
          find artifacts -name "*.sha256sum.txt" -exec cp {} AARs \;
          ./ghr -delete -t "${{ github.token }}" -n "${{ github.event.inputs.tag }}" "${{ github.event.inputs.tag }}" AARs


